pub struct Dataset {
    pub data_points: Vec<(f32, f32)>,
}
impl Dataset {
    pub fn two_x_plus_one() -> Dataset {
        Self {
            // try changing any of the values
            data_points: vec![
                (1.0, 3.0),
                (2.0, 5.0),
                (3.0, 7.0),
                (4.0, 9.0),
                (5.0, 11.0),
                (6.0, 13.0),
                (7.0, 15.0),
                (8.0, 17.0),
                (9.0, 19.0),
                (10.0, 21.0),
                (11.0, 23.0),
                (12.0, 25.0),
                (13.0, 27.0),
                (14.0, 29.0),
                (15.0, 31.0),
                (16.0, 33.0),
                (17.0, 35.0),
                (18.0, 37.0),
                (19.0, 39.0),
                (20.0, 41.0),
                (21.0, 43.0),
                (22.0, 45.0),
                (23.0, 47.0),
                (24.0, 49.0),
                (25.0, 51.0),
                (26.0, 53.0),
                (27.0, 55.0),
                (28.0, 57.0),
                (29.0, 59.0),
                (30.0, 61.0),
                (31.0, 63.0),
                (32.0, 66.0),
                (33.0, 67.0),
                (34.0, 69.0),
                (35.0, 71.0),
                (36.0, 73.0),
                (37.0, 75.0),
                (38.0, 77.0),
                (39.0, 79.0),
                (40.0, 81.0),
                (41.0, 83.0),
                (42.0, 85.0),
                (43.0, 87.0),
                (44.0, 89.0),
                (45.0, 91.0),
                (46.0, 93.0),
                (47.0, 95.0),
                (48.0, 97.0),
                (49.0, 99.0),
                (50.0, 101.0),
            ],
        }
    }
    pub fn dataset_generator(datapoints: i32, m: f32, c: f32) -> Self {
        let mut vec = Vec::new();
        for i in 0..datapoints {
            let data = (i as f32, i as f32 * m + c);
            vec.push(data);
        }
        Dataset { data_points: vec }
    }
}
